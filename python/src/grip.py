import cv2
import numpy
import math
from enum import Enum

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsv_threshold_hue = [55.03597122302158, 69.9830220713073]
        self.__hsv_threshold_saturation = [167.40107913669064, 255.0]
        self.__hsv_threshold_value = [176.57374100719426, 255.0]

        self.hsv_threshold_output = None

        self.__find_contours_0_input = self.hsv_threshold_output
        self.__find_contours_0_external_only = True

        self.find_contours_0_output = None

        self.__cv_canny_image = self.hsv_threshold_output
        self.__cv_canny_threshold1 = 0.0
        self.__cv_canny_threshold2 = 0.0
        self.__cv_canny_aperturesize = 3.0
        self.__cv_canny_l2gradient = False

        self.cv_canny_output = None

        self.__find_contours_1_input = self.cv_canny_output
        self.__find_contours_1_external_only = False

        self.find_contours_1_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.__hsv_threshold_input = source0
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue, self.__hsv_threshold_saturation, self.__hsv_threshold_value)

        # Step Find_Contours0:
        self.__find_contours_0_input = self.hsv_threshold_output
        (self.find_contours_0_output) = self.__find_contours(self.__find_contours_0_input, self.__find_contours_0_external_only)

        # Step CV_Canny0:
        self.__cv_canny_image = self.hsv_threshold_output
        (self.cv_canny_output) = self.__cv_canny(self.__cv_canny_image, self.__cv_canny_threshold1, self.__cv_canny_threshold2, self.__cv_canny_aperturesize, self.__cv_canny_l2gradient)

        # Step Find_Contours1:
        self.__find_contours_1_input = self.cv_canny_output
        (self.find_contours_1_output) = self.__find_contours(self.__find_contours_1_input, self.__find_contours_1_external_only)


    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    @staticmethod
    def __cv_canny(image, thres1, thres2, aperture_size, gradient):
        """Applies a canny edge detection to the image.
        Args:
           image: A numpy.ndarray as the input.
           thres1: First threshold for the canny algorithm. (number)
           thres2: Second threshold for the canny algorithm. (number)
           aperture_size: Aperture size for the canny operation. (number)
           gradient: If the L2 norm should be used. (boolean)
        Returns:
            The edges as a numpy.ndarray.
        """
        return cv2.Canny(image, thres1, thres2, apertureSize=(int)(aperture_size),
            L2gradient=gradient)

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy =cv2.findContours(input, mode=mode, method=method)
        return contours



