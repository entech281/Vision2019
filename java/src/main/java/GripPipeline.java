import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import edu.wpi.first.vision.VisionPipeline;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

/**
* GripPipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class GripPipeline implements VisionPipeline {

	//Outputs
	private Mat cvCvtcolorOutput = new Mat();
	private Mat hsvThresholdOutput = new Mat();
	private Mat blurOutput = new Mat();
	private Mat cvCannyOutput = new Mat();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	@Override	public void process(Mat source0) {
		// Step CV_cvtColor0:
		Mat cvCvtcolorSrc = source0;
		int cvCvtcolorCode = Imgproc.COLOR_BGR2HSV;
		cvCvtcolor(cvCvtcolorSrc, cvCvtcolorCode, cvCvtcolorOutput);

		// Step HSV_Threshold0:
		Mat hsvThresholdInput = cvCvtcolorOutput;
		double[] hsvThresholdHue = {74.57627118644068, 144.89361702127658};
		double[] hsvThresholdSaturation = {18.345323741007192, 255.0};
		double[] hsvThresholdValue = {69.63276836158192, 218.82978723404256};
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Blur0:
		Mat blurInput = hsvThresholdOutput;
		BlurType blurType = BlurType.get("Box Blur");
		double blurRadius = 10.81081081081081;
		blur(blurInput, blurType, blurRadius, blurOutput);

		// Step CV_Canny0:
		Mat cvCannyImage = blurOutput;
		double cvCannyThreshold1 = 0.0;
		double cvCannyThreshold2 = 0.0;
		double cvCannyAperturesize = 3;
		boolean cvCannyL2gradient = false;
		cvCanny(cvCannyImage, cvCannyThreshold1, cvCannyThreshold2, cvCannyAperturesize, cvCannyL2gradient, cvCannyOutput);

	}

	/**
	 * This method is a generated getter for the output of a CV_cvtColor.
	 * @return Mat output from CV_cvtColor.
	 */
	public Mat cvCvtcolorOutput() {
		return cvCvtcolorOutput;
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * @return Mat output from Blur.
	 */
	public Mat blurOutput() {
		return blurOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_Canny.
	 * @return Mat output from CV_Canny.
	 */
	public Mat cvCannyOutput() {
		return cvCannyOutput;
	}


	/**
	 * Converts an image from one color space to another.
	 * @param src Image to convert.
	 * @param code conversion code.
	 * @param dst converted Image.
	 */
	private void cvCvtcolor(Mat src, int code, Mat dst) {
		Imgproc.cvtColor(src, dst, code);
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 * @param output The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
	    Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
			new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * An indication of which type of filter to use for a blur.
	 * Choices are BOX, GAUSSIAN, MEDIAN, and BILATERAL
	 */
	enum BlurType{
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
			BILATERAL("Bilateral Filter");

		private final String label;

		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			}
			else if (GAUSSIAN.label.equals(type)) {
			return GAUSSIAN;
			}
			else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			}
			else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	/**
	 * Softens an image using one of several filters.
	 * @param input The image on which to perform the blur.
	 * @param type The blurType to perform.
	 * @param doubleRadius The radius for the blur.
	 * @param output The image in which to store the output.
	 */
	private void blur(Mat input, BlurType type, double doubleRadius,
		Mat output) {
		int radius = (int)(doubleRadius + 0.5);
		int kernelSize;
		switch(type){
			case BOX:
				kernelSize = 2 * radius + 1;
				Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
				break;
			case GAUSSIAN:
				kernelSize = 6 * radius + 1;
				Imgproc.GaussianBlur(input,output, new Size(kernelSize, kernelSize), radius);
				break;
			case MEDIAN:
				kernelSize = 2 * radius + 1;
				Imgproc.medianBlur(input, output, kernelSize);
				break;
			case BILATERAL:
				Imgproc.bilateralFilter(input, output, -1, radius, radius);
				break;
		}
	}

	/**
	 * Applies a canny edge detection to the image.
	 * @param image image to use.
	 * @param thres1 first threshold for the canny algorithm.
	 * @param thres2 second threshold for the canny algorithm.
	 * @param apertureSize aperture size for the canny operation.
	 * @param gradient if the L2 norm should be used.
	 * @param edges output of the canny.
	 */
	private void cvCanny(Mat image, double thres1, double thres2,
		double apertureSize, boolean gradient, Mat edges) {
		Imgproc.Canny(image, edges, thres1, thres2, (int)apertureSize, gradient);
	}




}

